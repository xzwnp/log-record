<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--  引入Springboot自带的Log配置,从而使他们同时生效  -->
    <include resource="org/springframework/boot/logging/logback/base.xml"/>

    <!-- 是否引入logStash   -->
    <springProperty name="ENABLE_LOG_STASH" scope="context" source="log-record.persistence.elk.enabled"
                    defaultValue="false"/>

    <!--LogStash访问host-->
    <springProperty name="LOG_STASH_HOST" scope="context" source="log-record.persistence.elk.host"
                    defaultValue="localhost"/>
    <!--  项目名称  -->
    <springProperty name="PROJECT_NAME" scope="context" source="log-record.persistence.elk.project-name"
                    defaultValue="DefaultProject"/>
    <!--应用(服务)名称-->
    <springProperty name="APP_NAME" scope="context" source="spring.application.name" defaultValue="SpringBoot"/>
    <!--日志文件前缀-->
    <springProperty name="FILE_INFO_NAME" scope="context" source="log-record.persistence.file.info-log-file-name"
                    defaultValue="logs/operation-info.%d.%i.log"/>
    <springProperty name="FILE_ERROR_NAME" scope="context" source="log-record.persistence.file.error-log-file-name"
                    defaultValue="logs/operation-error.%d.%i.log"/>
    <springProperty name="LOG_INNER_ERROR_NAME" scope="context"
                    source="log-record.persistence.file.log-inner-error-file-name"
                    defaultValue="logs/log-inner-error.%d.%i.log"/>
    <!-- 输出到文件   -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        File和fileNamePattern标签配一个就行-->
        <!--        <File>logs/operation.%-info.%i.log</File>-->
        <append>true</append>
        <!--   接收什么级别的日志     -->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>INFO</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
        <!--   日志格式     -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--   文件名格式      -->
            <fileNamePattern>${FILE_INFO_NAME}</fileNamePattern>
            <maxHistory>90</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- %d{format}：输出日志的日期时间，format是可选的日期时间格式。
                 %level：输出日志级别。
                 %logger{length}：输出logger的名称，length是可选的logger名称长度，缺省为logger名称的完整长度。
                 %msg：输出日志信息。%n：输出平台特定的行分隔符。
                 %thread：输出产生日志的线程名称。
                 %X{key}：输出指定key的MDC值。
                 %class：输出产生日志的Java类的名称。
                 %file：输出产生日志的Java源文件的名称。
                 %method：输出产生日志的Java方法的名称。
                 %n:换行-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level traceId:%X{traceId} - %msg %n</pattern>

            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <!--   接收什么级别的日志     -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--   日志格式     -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--   文件名格式      -->
            <fileNamePattern>${FILE_ERROR_NAME}</fileNamePattern>
            <maxHistory>90</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- %d{format}：输出日志的日期时间，format是可选的日期时间格式。
                 %level：输出日志级别。-5表示5个字符宽度
                 %logger{length}：输出logger的名称，length是可选的logger名称长度，缺省为logger名称的完整长度。
                 %msg：输出日志信息。%n：输出平台特定的行分隔符。
                 %thread：输出产生日志的线程名称。
                 %X{key}：输出指定key的MDC值。
                 %class：输出产生日志的Java类的名称。
                 %file：输出产生日志的Java源文件的名称。
                 %method：输出产生日志的Java方法的名称。-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level traceId:%X{traceId} - %msg 错误信息: %X{errorMsg} %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--  日志记录出错时,持久化到文件  -->
    <appender name="FILE_LOG_INNER_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <!--   接收什么级别的日志     -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--   日志格式     -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--   文件名格式      -->
            <fileNamePattern>${LOG_INNER_ERROR_NAME}</fileNamePattern>
            <maxHistory>90</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- %d{format}：输出日志的日期时间，format是可选的日期时间格式。
                 %level：输出日志级别。-5表示5个字符宽度
                 %logger{length}：输出logger的名称，length是可选的logger名称长度，缺省为logger名称的完整长度。
                 %msg：输出日志信息。%n：输出平台特定的行分隔符。
                 %thread：输出产生日志的线程名称。
                 %X{key}：输出指定key的MDC值。
                 %class：输出产生日志的Java类的名称。
                 %file：输出产生日志的Java源文件的名称。
                 %method：输出产生日志的Java方法的名称。-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--  LOG_STASH  -->
    <if condition='property("ENABLE_LOG_STASH").equals("true")'>
        <then>
            <!--输出到LogStash,DEBUG级别以上-->
            <appender name="LOG_STASH_INFO" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>INFO</level>
                </filter>
                <destination>${LOG_STASH_HOST}:4560</destination>
                <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <timestamp>
                            <timeZone>Asia/Shanghai</timeZone>
                        </timestamp>
                        <!--自定义日志输出格式-->
                        <pattern>
                            <pattern>
                                {
                                "level": "%level",
                                "项目": "${PROJECT_NAME:-}",
                                "服务": "${APP_NAME:-}",
                                "pid": "${PID:-}",
                                "stack_trace": "%X{userId}",
                                "message": "%message"
                                }
                            </pattern>
                        </pattern>
                    </providers>
                </encoder>
            </appender>

            <!--输出到LogStash,仅ERROR级别-->
            <appender name="LOG_STASH_ERROR" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>ERROR</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
                <destination>${LOG_STASH_HOST}:4561</destination>
                <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <timestamp>
                            <timeZone>Asia/Shanghai</timeZone>
                        </timestamp>
                        <!--自定义日志输出格式-->
                        <pattern>
                            <pattern>
                                {
                                "level": "%level",
                                "project": "${PROJECT_NAME:-}",
                                "service": "${APP_NAME:-}",
                                "pid": "${PID:-}",
                                "stack_trace": "%X{userId}",
                                "message": "%message"
                                }
                            </pattern>
                        </pattern>
                    </providers>
                </encoder>
            </appender>
        </then>
    </if>

    <!--  logger和root的区别:root定义默认的日志输出方式,不能缺省.这里没配是因为通过include引入了Springboot默认的日志配置  -->
    <!--    <root level="INFO"><appender-ref ref="console" /></root>-->
    <!--  logger:配置某个包/某个类的日志输出方式,和root相比相当于是定制化了.
           注意需要配置additivity="false",表示不向上级logger传递消息,如果配置为true,可能会导致重复输出
      -->
    <logger name="LogInnerError" additivity="false" level="INFO">
        <appender-ref ref="FILE_LOG_INNER_ERROR"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <logger name="FileOperationLog" additivity="false" level="INFO">
        <appender-ref ref="FILE_INFO"/>
        <appender-ref ref="FILE_ERROR"/>
    </logger>

    <if condition='property("ENABLE_LOG_STASH").equals("true")'>
        <then>
            <logger name="ElkOperationLog" additivity="false" level="INFO">
                <appender-ref ref="LOG_STASH_INFO"/>
                <appender-ref ref="LOG_STASH_ERROR"/>
            </logger>
        </then>
    </if>
</configuration>